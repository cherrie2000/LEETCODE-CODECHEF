//802. Find Eventual Safe States

class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n=graph.size();
      vector<int> v(n,0);
      for(int i=0; i<graph.size();i++){
        for(int j=0;j<graph[i].size();j++){
            v[i]++;
        }
      }   

      map<int,vector<int>> rev_graph;
       for(int i=0; i<graph.size();i++){
        for(int j=0;j<graph[i].size();j++){
            rev_graph[graph[i][j]].push_back(i);
        }
      }   
      queue<int> q;
      for(int i=0;i<n;i++){
        if(v[i] ==0) {q.push(i);}
      }
      vector<int> ans;
      while(!q.empty()){
        int top=q.front();
        ans.push_back(top);
        q.pop(); cout<<top<<"  ";
        for(auto it:rev_graph[top]){
           v[it]--; cout<<it<<" ";
           if(v[it]==0) q.push(it);
        } cout<<"\n";
      }
      sort(ans.begin(),ans.end());
      return ans;
    }
};
