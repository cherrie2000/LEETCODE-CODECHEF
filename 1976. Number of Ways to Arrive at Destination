//1976. Number of Ways to Arrive at Destination

class Solution {
public:
int mod= 1e9+7;
    int countPaths(int n, vector<vector<int>>& roads) {
        vector<vector<pair<int,int>>> adj(n);
        for(auto it:roads){
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }
        priority_queue<pair<long long, int>, vector<pair<long long , int>>, greater<>> pq;
        pq.push({0,0});
        vector<long long> res(n,LLONG_MAX);
        vector<int> ways(n,0);
        ways[0]=1;
        while(!pq.empty()){
            auto [time,node] = pq.top();
            pq.pop();

            if(time>res[node]) continue;

            for(auto it:adj[node]){
                long long new_time = time+it.second;
                if(new_time<res[it.first]){
                    res[it.first] = new_time;
                    ways[it.first] = ways[node];
                    pq.push({new_time,it.first});
                }
                else if(new_time == res[it.first]){
                    ways[it.first] = (ways[it.first]+ways[node])%mod;
                }
            }
        }

        return ways[n-1];
    }
};
